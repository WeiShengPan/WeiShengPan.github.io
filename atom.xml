<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-25T09:22:44.093Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Weisheng Pan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 包定义</title>
    <link href="http://yoursite.com/posts/2127582241/"/>
    <id>http://yoursite.com/posts/2127582241/</id>
    <published>2017-08-25T08:38:54.000Z</published>
    <updated>2017-08-25T09:22:44.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JAVA-包定义"><a href="#JAVA-包定义" class="headerlink" title="JAVA 包定义"></a>JAVA 包定义</h3><p>所有包都是使用jar打的，只不过目标文件的扩展名不一样。</p>
<ul>
<li>jar包：打成JAR包的代码，一般作为工具类，在项目中，会应用到N多JAR工具包；通常是开发时要引用通用类，打成包便于存放管理。</li>
<li>war包：JAVA WEB工程打成war包，部署到容器中,进行发布。如果我们的服务器选择TOMCAT等轻量级服务器，一般就打出WAR包进行发布。</li>
<li>ear包：这针对企业级项目的，实际上EAR包中包含WAR包和几个企业级项目的配置文件而已，一般服务器选择WebSphere等，都会使用EAR包。通常是EJB打成ear包。ear文件包含整个项目，内含多个ejb module（jar文件）和web module（war文件）<a id="more"></a>
</li>
</ul>
<h3 id="JAVA-包结构"><a href="#JAVA-包结构" class="headerlink" title="JAVA 包结构"></a>JAVA 包结构</h3><h5 id="1-war包"><a href="#1-war包" class="headerlink" title="1.war包"></a>1.war包</h5><p>标准格式：index.jsp(可选) + META-INF目录 + WEB-INF目录 + 其他文件夹</p>
<ul>
<li>index.jsp可有可无。</li>
<li>META-INF目录下包括一个MANIFEST.MF文件，此目录和文件在用jar工具打包时会自动生成。</li>
<li><p>WEB-INF目录下包括classes目录，lib目录，web.xml文件，web.xml文件格式如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;web-app version=&quot;2.4&quot; </div><div class="line">   xmlns=&quot;http://Java.sun.com/xml/ns/j2ee&quot; </div><div class="line">   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; </div><div class="line">   xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee </div><div class="line">   http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt;</div><div class="line">&lt;welcome-file-list&gt;</div><div class="line">   &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</div><div class="line">&lt;/welcome-file-list&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="2-ear包"><a href="#2-ear包" class="headerlink" title="2. ear包:"></a>2. ear包:</h5><p>标准格式：war包 + META-INF目录<br>META-INF目录下包括 MANIFEST.MF , application.xml , ibm-application-bnd.xmi , ibm-application-ext.xmi , was.policy。</p>
<ul>
<li><p>application.xml文件：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE application PUBLIC &quot;-//Sun Microsystems, Inc.//DTD J2EE Application 1.3//EN&quot; &quot;http://java.sun.com/dtd/application_1_3.dtd&quot;&gt;</div><div class="line">  	&lt;application id=&quot;Application_ID&quot;&gt;</div><div class="line">     &lt;display-name&gt;AsiainfoBICASApplicationEAR&lt;/display-name&gt;</div><div class="line">     &lt;description&gt;This is the Asiainfo BICAS Application Server Application.&lt;/description&gt;</div><div class="line">     &lt;module id=&quot;WebModule_1&quot;&gt;</div><div class="line">        &lt;web&gt;</div><div class="line">           &lt;web-uri&gt;example.war&lt;/web-uri&gt;</div><div class="line">           &lt;context-root&gt;/abc&lt;/context-root&gt;</div><div class="line">        &lt;/web&gt;</div><div class="line">     &lt;/module&gt;</div><div class="line">  	&lt;/application&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>ibm-application-bnd.xmi文件：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;applicationbnd:ApplicationBinding xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;http://www.omg.org/XMI&quot; xmlns:applicationbnd=&quot;applicationbnd.xmi&quot; xmlns:common=&quot;common.xmi&quot; xmlns:application=&quot;application.xmi&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmi:id=&quot;Application_ID_Bnd&quot;&gt;</div><div class="line">&lt;appName xsi:nil=&quot;true&quot;/&gt;</div><div class="line">&lt;application href=&quot;META-INF/application.xml#Application_ID&quot;/&gt;</div><div class="line">&lt;/applicationbnd:ApplicationBinding&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>ibm-application-ext.xmi文件：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;applicationext:ApplicationExtension xmi:version=&quot;2.0&quot; xmlns:xmi=&quot;http://www.omg.org/XMI&quot; xmlns:applicationext=&quot;applicationext.xmi&quot; xmlns:application=&quot;application.xmi&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmi:id=&quot;Application_ID_Ext&quot; sharedSessionContext=&quot;false&quot;&gt;</div><div class="line">&lt;application href=&quot;META-INF/application.xml#Application_ID&quot;/&gt;</div><div class="line">&lt;/applicationext:ApplicationExtension&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="jar包、war包、ear包的使用和区别"><a href="#jar包、war包、ear包的使用和区别" class="headerlink" title="jar包、war包、ear包的使用和区别"></a>jar包、war包、ear包的使用和区别</h3><h5 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h5><ul>
<li>jar文件（扩展名为. Jar，Java Application Archive）包含Java类的普通库、资源（resources）、辅助文件（auxiliary files）等。</li>
<li>War文件（扩展名为.War,Web Application Archive）包含全部Web应用程序。在这种情形下，一个Web应用程序被定义为单独的一组文件、类和资源，用户可以对jar文件进行封装，并把它作为小型服务程序（servlet）来访问。</li>
<li>Ear文件（扩展名为.Ear,Enterprise Application Archive）包含全部企业应用程序。在这种情形下，一个企业应用程序被定义为多个jar文件、资源、类和Web应用程序的集合。</li>
</ul>
<p>每一种文件（.jar, .war, .ear）只能由应用服务器（application servers）、小型服务程序容器（servlet containers）、EJB容器（EJB containers）等进行处理。</p>
<h5 id="war的使用："><a href="#war的使用：" class="headerlink" title="war的使用："></a>war的使用：</h5><p>如果想生成war文件，可以使用 <code>jar -cvf myproject.war *</code>,如果想查看war包中有哪些文件，可以使用 <code>jar -tf myproject.war</code>,如果想直接解压war文件，可以使用 <code>jar -xvf web1.war</code>。另外，也可使用winrar软件选择zip压缩方式，并将压缩文件后缀名改为war即可压缩生成war文件；同样使用winrar软件可以强行打开war文件，或者强行解压war文件；使用jar命令与winrar软件的区别在于前者在压缩文件的同时会生成MetaINF文件夹，内包含MANIFEST.MF文件。</p>
<p>当你的项目在没有完全竣工的时候，不适合使用war文件，因为你的类会由于调试之类的经常改，这样来回删除、创建war文件很不爽，最好是你的项目已经完成了，不改了，那么就打个war包吧，这个时候一个war文件就相当于一个web应用程序；而jar文件就是把类和一些相关的资源封装到一个包中，便于程序中引用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JAVA-包定义&quot;&gt;&lt;a href=&quot;#JAVA-包定义&quot; class=&quot;headerlink&quot; title=&quot;JAVA 包定义&quot;&gt;&lt;/a&gt;JAVA 包定义&lt;/h3&gt;&lt;p&gt;所有包都是使用jar打的，只不过目标文件的扩展名不一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jar包：打成JAR包的代码，一般作为工具类，在项目中，会应用到N多JAR工具包；通常是开发时要引用通用类，打成包便于存放管理。&lt;/li&gt;
&lt;li&gt;war包：JAVA WEB工程打成war包，部署到容器中,进行发布。如果我们的服务器选择TOMCAT等轻量级服务器，一般就打出WAR包进行发布。&lt;/li&gt;
&lt;li&gt;ear包：这针对企业级项目的，实际上EAR包中包含WAR包和几个企业级项目的配置文件而已，一般服务器选择WebSphere等，都会使用EAR包。通常是EJB打成ear包。ear文件包含整个项目，内含多个ejb module（jar文件）和web module（war文件）
    
    </summary>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>线程状态</title>
    <link href="http://yoursite.com/posts/3971113224/"/>
    <id>http://yoursite.com/posts/3971113224/</id>
    <published>2017-08-24T06:57:40.000Z</published>
    <updated>2017-08-25T06:32:55.761Z</updated>
    
    <content type="html"><![CDATA[<p>一个线程可以处于<strong>新建、就绪、阻塞、死亡</strong>四种状态之一。</p>
<ol>
<li>新建（new）:当线程被创建时，会短暂处于这种状态。此    时已经分配了必须的系统资源，并执行了初始化操作。此刻线程已经有资格获得CPU时间了，之后调度器将把这个线程转变为就绪(Runnable)状态或阻塞(Blocked)状态。</li>
<li>就绪（Runnable）：在这种状态下，只要调度器把时间片分配给线程，线程就可以运行。也就是说，在任意时刻，线程可以运行也可以不运行。只要调度器能分配时间片给线程，它就可以运行，这不同于死亡（Dead）和阻塞(Blocked)状态。<a id="more"></a></li>
<li>阻塞（Blocked）：线程能够运行，但有某个条件阻止它的运行。当线程处于阻塞状态时，调度器将忽略该线程，不会分配CPU时间片。直到线程重新进入就绪（Runnable）状态，它才有可能执行操作。</li>
<li>死亡（Dead）：处于死亡或终止状态的线程将不再是可调度的，并且再也不会得到CPU时间片，它的任务已经结束或不再可运行。任务死亡的通常方式时<code>run（）</code>方法返回，但是任务的线程还可以被中断。</li>
</ol>
<h3 id="进入阻塞状态"><a href="#进入阻塞状态" class="headerlink" title="进入阻塞状态"></a>进入阻塞状态</h3><p>一个任务进入阻塞状态可能有一下原因：</p>
<ul>
<li>通过调用<code>sleep（）</code>使线程进入休眠状态，这种情况下，线程在指定时间内阻塞不会运行。</li>
<li>通过调用<code>wait（）</code>使线程挂起，这种情况下，直到线程得到<code>notify（）</code>或<code>notifyAll（）</code>消息，线程才会进入就绪（Runnable）状态。</li>
<li>线程在等待某个输入/输出完成</li>
<li>线程试图在某个同步对象上调用其同步控制方法，但是另一个线程已经获取该对象锁导致对象锁不可用。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个线程可以处于&lt;strong&gt;新建、就绪、阻塞、死亡&lt;/strong&gt;四种状态之一。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建（new）:当线程被创建时，会短暂处于这种状态。此    时已经分配了必须的系统资源，并执行了初始化操作。此刻线程已经有资格获得CPU时间了，之后调度器将把这个线程转变为就绪(Runnable)状态或阻塞(Blocked)状态。&lt;/li&gt;
&lt;li&gt;就绪（Runnable）：在这种状态下，只要调度器把时间片分配给线程，线程就可以运行。也就是说，在任意时刻，线程可以运行也可以不运行。只要调度器能分配时间片给线程，它就可以运行，这不同于死亡（Dead）和阻塞(Blocked)状态。
    
    </summary>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java类型互转</title>
    <link href="http://yoursite.com/posts/4056832773/"/>
    <id>http://yoursite.com/posts/4056832773/</id>
    <published>2017-08-23T03:22:06.000Z</published>
    <updated>2017-08-25T03:04:02.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String和List的互转"><a href="#String和List的互转" class="headerlink" title="String和List的互转"></a>String和List的互转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//List转String</div><div class="line">String list2String = StringUtils.join(advSrcList.toArray(), &quot;;&quot;)</div><div class="line"></div><div class="line">//String转List</div><div class="line">List&lt;String&gt; string2List = Arrays.asList(domainGroupQueryReq.getQueryDomainList().split(&quot;;&quot;))</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="int-long-float-double和String的互转"><a href="#int-long-float-double和String的互转" class="headerlink" title="int/long/float/double和String的互转"></a>int/long/float/double和String的互转</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">String intStr = String.valueOf(1);</div><div class="line">String longStr = String.valueOf(1L);</div><div class="line">String floatStr = String.valueOf(0.1f);</div><div class="line">String doubleStr = String.valueOf(0.1d);</div><div class="line"></div><div class="line">Integer intNum = Integer.parseInt(&quot;1&quot;);</div><div class="line">Long longNum = Long.parseLong(&quot;1&quot;);</div><div class="line">Float floatNum = Float.parseFloat(&quot;0.1&quot;);</div><div class="line">Double doubleNum = Double.parseDouble(&quot;0.1&quot;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;String和List的互转&quot;&gt;&lt;a href=&quot;#String和List的互转&quot; class=&quot;headerlink&quot; title=&quot;String和List的互转&quot;&gt;&lt;/a&gt;String和List的互转&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//List转String&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String list2String = StringUtils.join(advSrcList.toArray(), &amp;quot;;&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//String转List&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; string2List = Arrays.asList(domainGroupQueryReq.getQueryDomainList().split(&amp;quot;;&amp;quot;))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>volatile关键字</title>
    <link href="http://yoursite.com/posts/287179488/"/>
    <id>http://yoursite.com/posts/287179488/</id>
    <published>2017-08-23T03:02:35.000Z</published>
    <updated>2017-08-25T03:04:06.962Z</updated>
    
    <content type="html"><![CDATA[<p>从实践角度而言，volatile的一个重要作用就是和<strong>CAS</strong>结合，保证了原子性，详细的可以参见java.util.concurrent.atomic包下的类，比如AtomicInteger。</p>
<ol>
<li>多线程主要围绕<strong>可见性</strong>和<strong>原子性</strong>两个特性而展开。<ul>
<li>原子性：原子性可以应用于除double和long之外的所有基本类型之上的简单操作。JVM可以将64位（long和double变量）的读取和写入当做两个分离的32位操作来执行，这就产生了在一个读取和写入操作中发生上下文切换，导致不同任务可能看到不正确的结果（被称为字撕裂）。使用volatile关键字就会获得原子性。</li>
<li>可见性：volatile关键字还确保了可视性。如果一个域声明为volatile，只要对这个域产生写操作，那么所有读操作都应该看到这个修改，即便使用了缓存，volatile域会立即被写入到主存中，而读取操作就发生在主存中。而非volatile域的原子操作不必刷新到主存中去。<a id="more"></a></li>
</ul>
</li>
<li>代码底层执行不像我们看到的高级语言Java程序这么简单，它的执行是 [Java代码–&gt;字节码–&gt;根据字节码执行对应的C/C++代码–&gt;C/C++代码被编译成汇编语言–&gt;和硬件电路交互] 。现实中，为了获取更好的性能JVM可能会对指令进行重排序，多线程下可能会出现一些意想不到的问题。使用volatile则会对<strong>禁止语义重排序</strong>，当然这也一定程度上降低了代码执行效率</li>
</ol>
<blockquote>
<p><strong>CAS</strong>，全称为<strong>Compare and Swap</strong>，即比较-替换。假设有三个操作数：内存值V、旧的预期值A、要修改的值B，当且仅当预期值A和内存值V相同时，才会将内存值修改为B并返回true，否则什么都不做并返回false。当然CAS一定要volatile变量配合，这样才能保证每次拿到的变量是主内存中最新的那个值，否则旧的预期值A对某条线程来说，永远是一个不会变的值A，只要某次CAS操作失败，永远都不可能成功。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从实践角度而言，volatile的一个重要作用就是和&lt;strong&gt;CAS&lt;/strong&gt;结合，保证了原子性，详细的可以参见java.util.concurrent.atomic包下的类，比如AtomicInteger。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多线程主要围绕&lt;strong&gt;可见性&lt;/strong&gt;和&lt;strong&gt;原子性&lt;/strong&gt;两个特性而展开。&lt;ul&gt;
&lt;li&gt;原子性：原子性可以应用于除double和long之外的所有基本类型之上的简单操作。JVM可以将64位（long和double变量）的读取和写入当做两个分离的32位操作来执行，这就产生了在一个读取和写入操作中发生上下文切换，导致不同任务可能看到不正确的结果（被称为字撕裂）。使用volatile关键字就会获得原子性。&lt;/li&gt;
&lt;li&gt;可见性：volatile关键字还确保了可视性。如果一个域声明为volatile，只要对这个域产生写操作，那么所有读操作都应该看到这个修改，即便使用了缓存，volatile域会立即被写入到主存中，而读取操作就发生在主存中。而非volatile域的原子操作不必刷新到主存中去。
    
    </summary>
    
    
      <category term="JAVA" scheme="http://yoursite.com/tags/JAVA/"/>
    
  </entry>
  
</feed>
